{"ast":null,"code":"import { catchError } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let FileService = /*#__PURE__*/(() => {\n  class FileService {\n    constructor(http) {\n      this.http = http;\n      this.filesUrl = `${environment.API_URL}/files/`;\n    }\n\n    getFiles(teacher = 0, path = \"%2F\") {\n      return this.http.get(`${this.filesUrl}${teacher}/${path}/`).pipe(catchError(this.handleError('filesUrl', [])));\n    }\n\n    getFile(teacher = 0, path = \"%2F\", name = \"\") {\n      return this.http.get(`${this.filesUrl}${teacher}/${path}/${name}/`).pipe(catchError(this.handleError('filesUrl')));\n    }\n\n    updateFile(teacher = 0, path = \"%2F\", name = \"\", students = [], new_name, new_path) {\n      let body = {\n        name: new_name,\n        path: new_path,\n        students: students.map(student => {\n          return student.id;\n        })\n      };\n      return this.http.put(`${this.filesUrl}${name}/${teacher}/${path}/`, body).pipe(catchError(this.handleError('filesUrl')));\n    }\n\n    deleteFile(teacher = 0, path = \"%2F\", name = \"\") {\n      return this.http.delete(`${this.filesUrl}${name}/${teacher}/${path}/`).pipe(catchError(this.handleError('filesUrl')));\n    }\n\n    addFile(id = 0, path = \"%2F\", name = \"\", students = []) {\n      let body = {\n        name: name,\n        path: path,\n        students: students.map(student => {\n          return student.id;\n        })\n      };\n      return this.http.post(`${this.filesUrl}${id}/${encodeURIComponent(path)}/`, body).pipe(catchError(this.handleError('filesUrl')));\n    }\n\n    handleError(operation = 'operation', result) {\n      return error => {\n        // TODO: send the error to remote logging infrastructure\n        console.error(\"File Service: \" + error); // log to console instead\n        // Let the app keep running by returning an empty result.\n\n        return of(result);\n      };\n    }\n\n  }\n\n  FileService.ɵfac = function FileService_Factory(t) {\n    return new (t || FileService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  FileService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FileService,\n    factory: FileService.ɵfac,\n    providedIn: 'root'\n  });\n  return FileService;\n})();","map":null,"metadata":{},"sourceType":"module"}