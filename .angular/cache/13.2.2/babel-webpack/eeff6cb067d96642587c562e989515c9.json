{"ast":null,"code":"import { catchError } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(http) {\n      this.http = http;\n      this.userUrl = `${environment.API_URL}/user/`;\n      this.studentsUrl = `${this.userUrl}students`;\n    }\n\n    getUser() {\n      return this.http.get(this.userUrl).pipe(catchError(this.handleError('userUrl')));\n    }\n\n    getUserbyID(id) {\n      return this.http.get(`${this.userUrl}${id}/`).pipe(catchError(this.handleError('userUrl')));\n    }\n\n    updateUser(updated, old_password, new_password1, new_password2) {\n      let new_data = {\n        username: updated.username,\n        first_name: updated.first_name,\n        last_name: updated.last_name,\n        email: updated.email,\n        old_password: old_password,\n        new_password1: new_password1,\n        new_password2: new_password2\n      };\n      return this.http.put(this.userUrl, new_data);\n    }\n\n    getStudents() {\n      return this.http.get(this.studentsUrl).pipe(catchError(this.handleError('studentsUrl', [])));\n    }\n\n    handleError(operation = 'operation', result) {\n      return error => {\n        // TODO: send the error to remote logging infrastructure\n        console.error(\"User Service:\" + error); // log to console instead\n        // Let the app keep running by returning an empty result.\n\n        return of(result);\n      };\n    }\n\n  }\n\n  UserService.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  UserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module"}