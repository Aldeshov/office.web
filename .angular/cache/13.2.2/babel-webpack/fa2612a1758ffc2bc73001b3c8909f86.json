{"ast":null,"code":"import { catchError } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let NewsService = /*#__PURE__*/(() => {\n  class NewsService {\n    constructor(http) {\n      this.http = http;\n      this.newsUrl = `${environment.API_URL}/news/`;\n    }\n\n    getNews() {\n      return this.http.get(this.newsUrl).pipe(catchError(this.handleError('newsUrl', [])));\n    }\n\n    searchNews(term) {\n      if (!term.trim()) {\n        // if not search term, return empty hero array.\n        return of([]);\n      }\n\n      return this.http.get(`${this.newsUrl}?title=${term}`).pipe(catchError(this.handleError('search', [])));\n    }\n\n    handleError(operation = 'operation', result) {\n      return error => {\n        // TODO: send the error to remote logging infrastructure\n        console.error(\"News Service: \" + error); // log to console instead\n        // Let the app keep running by returning an empty result.\n\n        return of(result);\n      };\n    }\n\n  }\n\n  NewsService.ɵfac = function NewsService_Factory(t) {\n    return new (t || NewsService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  NewsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NewsService,\n    factory: NewsService.ɵfac,\n    providedIn: 'root'\n  });\n  return NewsService;\n})();","map":null,"metadata":{},"sourceType":"module"}